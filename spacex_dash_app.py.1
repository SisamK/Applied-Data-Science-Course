# Import required libraries
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # Task 1: Dropdown for launch site selection
                                dcc.Dropdown(id='site-dropdown',
                                             options=[
                                                 {'label': 'All Sites', 'value': 'ALL'},
                                                 {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},
                                                 {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},
                                                 {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
                                                 {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'}
                                             ],
                                             value='ALL',
                                             placeholder="Select a Launch Site",
                                             searchable=True),
                                html.Br(),

                                # Task 2: Pie chart for success vs. failure counts
                                html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),

                                # Task 3: Slider for payload range
                                html.P("Payload range (Kg):"),
                                dcc.RangeSlider(id='payload-slider',
                                                min=0,
                                                max=max_payload,
                                                step=1000,
                                                marks={0: '0', max_payload: str(max_payload)},
                                                value=[min_payload, max_payload]),

                                # Task 4: Scatter chart for correlation between payload and success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])

# Task 2: Callback for success-pie-chart
@app.callback(
    Output('success-pie-chart', 'figure'),
    [Input('site-dropdown', 'value')]
)
def update_pie_chart(selected_site):
    if selected_site == 'ALL':
        filtered_df = spacex_df
    else:
        filtered_df = spacex_df[spacex_df['Launch Site'] == selected_site]
    
    success_counts = filtered_df.groupby('class')['class'].count()
    success_counts.index = ['Failure', 'Success']
    fig = px.pie(success_counts, names=success_counts.index, values=success_counts, 
                 title=f'Success vs. Failure Launches for {selected_site if selected_site != "ALL" else "All Sites"}')
    return fig

# Task 4: Callback for success-payload-scatter-chart
@app.callback(
    Output('success-payload-scatter-chart', 'figure'),
    [Input('site-dropdown', 'value'),
     Input('payload-slider', 'value')]
)
def update_scatter_chart(selected_site, payload_range):
    low, high = payload_range
    filtered_df = spacex_df[(spacex_df['Payload Mass (kg)'] >= low) & (spacex_df['Payload Mass (kg)'] <= high)]
    
    if selected_site != 'ALL':
        filtered_df = filtered_df[filtered_df['Launch Site'] == selected_site]
    
    fig = px.scatter(filtered_df, x='Payload Mass (kg)', y='class',
                     color='Launch Site', title=f'Launch Success vs Payload Mass for {selected_site if selected_site != "ALL" else "All Sites"}')
    fig.update_layout(yaxis=dict(tickmode='array', tickvals=[0, 1], ticktext=['Failure', 'Success']))
    return fig

# Run the app
if __name__ == '__main__':
    app.run_server()
